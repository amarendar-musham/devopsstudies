Architecture ===
Kubernetes Master ## all components runs as pod in kube-system namespace
  etcd <-> (key-value store that keeps the current state of cluster)
  
            kube-apiserver (serves REST operations, connects to etcd database)
            kube-controllermanager (manages current state of cluster)
            kube-scheduler (schedules pods on specific nodes based on labels, taints, tolerations set for pods)
           
kubernetes node ## kube-proxy runs as pod(kube-system), kubelet is a service(systemctl)

  kubelet (Talks to container engine to ensure pods availability)
  kube-proxy (runs on everynode + uses iptables to provide an interface to connect to k8s components)
  
container runtime: takes care of actually running the containers. 
supervisord: monitors and guarantees the availability of kubelet and docker processes. 
network agent: implements a software defined n/w+ing solution, such as weave
logging: the CNCF project Fluentd used for unified logging in the cluster. a Fluentd agent must be installed on all k8s nodes. 
=================================================================================

Cluster creation(kubeadm) ===
All nodes::
Install(yum) : docker(container runtime), kubelet(enable-service), kubeadm, kubectl
disable swap (free -m, /etc/fstab, disable swap mount)
disable firewall or open appropriate ports in the firewall
/etc/hosts, setup hostname resolving ##/etc/hosts # { IP Domain alias} ## ssh alias

On control: kubeadm init. (root), note down "kubeadm join" command after initialization.

client configuration file creation:(regular user)
 - create(~/.kube) && cp -l /etc/kubernetes/admin.conf ~/.kube/config && chown $(id -u):$(id -g) ~/.kube/config
 - kubectl cluster-info ; kubectl config view 
 
 Alternative: export KUBECONFIG=/etc/kubernetes/admin.conf
 kubectl config -h/view/get-context
 
 n/w add-on = kubectl apply -f <flannel/calico/Weave>.yaml ##  CNI(container n/w interface), pod communication
 Ensure namespace/kube-system - pod/{coredns,flannel} is running. If it is up and running, you can start joining nodes. 
 
--- Join nodes in cluster(root)
kubeadm join --token<> IP:6443 --discovery-token-ca-cert-hash <> ## if no token -> kubeadm token list/create/
=================================================================================

API and Objects ===
Install bash-completion && kubectl completion bash > /etc/bash_completion.d/kubectl

kubectl auth can-i create <pods/deployments> --as amusham --namespace <>
kubectl api-versions

Explain api components: 
kubectl explain pod.spec ## To list the fields pod.spec  ## pod.{metadata,kind,apiVersion,spec} # pod.spec.container # deployments.spe.strategy

Flow:-> Ingress -> service+LB -> deployments{upgrades+replication}(pod:ip+volume) -> PVC -> PV

How api works::: etcd <-> api-server <-> kubectl(~/.kube/config, includes TLS)
kubectl & alternates::: 
- kube-proxy -> curl(http) (here curl not takes care of TLS, so kube-proxy does) ## kubectl way
- direct curl(https) -> TLS, parse --cert, --key, --cacert values (Less important)
- kubectl proxy --port=8001 &

curl http://localhost:8001/version 
curl http://localhost:8001/api/v1/namespaces/default/pods/{<pod_name>}

sudo yum {provides */etcdctl, install -y etcd} && etcdctl -h (control/manage DB), 
etcdctl2 to talk with v2 API. 
=================================================================================

Deployments === 
Flow part: deployments{upgrades+replication}(pod:ip+volume)

kubectl {get, describe, create, scale(--replicas), edit, label}
get = (--show-labels, --selector) # Ex: label/selector app=name

kubectl create deployment --image=<> {} # Creates = (depl, rs, pod), depl-name={} 
Alt: kubectl create -f deplX.yaml
#1.deployments/{} 
#2.replicaset/{}-<10d-token> 
#3. pod/{}-<10d-token>-<5d-token> 

kubectl get deployment.apps nginxdepl -o yaml | less
  apiVersion: v1
  kind: Deployment
  metadata:{*name,namespace,labels}
  spec{replicas, selector.matchlabels, template:pod.spec, serviceName}
  
service.spec{selector, type, port} ## service types....
pod.spec.containers[0]{name, image, ports(name,port), volumeMounts(name,path), volumes(name,pvc/nfs)} 
statefulSet.spec{++volumeClaimTemplate(metadata,spec)}
  
Simple deployment : kubectl run --image=<> --replicas=<> ## get - depl/pod, describe - pod. 
Simple service: kubect expose deployment nginx --port=80 --name=myservice
=================================================================================

Storage, secrets, configMaps ===

simple storage - > 
    kind: pod
    metadata{*name, label}
    spec.Containers.volumeMounts: (name:test, mountPath: /centos1)
    spec.volumes: (name: test, emptyDir: {})

pod.spec.volumes{name, type} #types -> {PVC, ConfigMap, Secret}

PVC -> PV(NFS/Cloud storage)
      pod.spec{containers(volumeMounts), volumes(PVC.claimname)}
      pvc.spec{accessModes(rwm), resources(requests,limits)}
      pv.spec{capacity(storage), accessmodes(rwm), hostpath(path)/nfs(server/path)}

ConfigMap -> (files/dir/variables)
          1. kubectl create cm <cm-name> --from-file nginx.conf (or) --from-literal=user=amar --from-literal=pass=abc
For files: 
          2. pod.spec.volumes.configMap{name,items.key} ## items.key is above cm-name.
          3. pod.spec.containers.volumeMounts{name(cm-name),path} ## cm-name from step2(defined volume)
For variables(key,value): 
          2. pod.spec.containers.env{name, valueFrom.configMapKeyRef(cm-name,key)} ## cm-name from kubectl command.

Secrets -> (vars)(base64 encode, no-encrypt)
*** Types of secretes:  generic, TLS, docker-registry

          1. kubectl create secret generic secretstuff --from-literal=pass=abc --from-literal=user=amusham # tls{--key,--cert} 
          1. kubectl create secret docker-registry regcred --docker-server=<reg-server> --docker-username=<> --docker-password=<> --docker-email=<>
          kubectl get secret regcred --output=yaml  ##base64 decode data.dockerconfig

For tls:          
          2. ingress.spec{host, path, backend.serviceName, tls) ## ingress.spec.tls{host, secretName}
For docker-registry:
          2. pod.spec.imagePullSecrets.name = regcred ## regcred from kubectl command 



          
