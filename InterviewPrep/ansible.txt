Configuration Management:
Simple, agentless architecture, communicating over SSH or WinRM, and works by pushing configurations from a central server to nodes. 
Agentless = No software needs to be installed on the nodes being managed
Ansible uses YAML for playbooks, unlike chef/Puppet that uses Ruby-based DSL's ## set of tasks that describes desired.state of system = configurations/deployments
Ansible Inventory = A list of managed nodes/hosts, can be organized into groups
ad-hoc commands = single-line commands used for quick tasks, like restarting a service on multiple servers. 
        Playbooks = structured YAML files for complex and repeatable automation.
Ansible Galaxy = repository for Ansible roles, allows re-using playbooks. cmd=ansible-galaxy to manage those roles.
Ansible Vault =  for sensitive info = passwd/APIkeys; decrypted during playbook execution
Roles = organizes playbooks into re-usable components. separate dirs makes it easy to manage/reuse across playbooks
        ## dir structure = roles/<role-name>/{tasks/, handlers/, files/, templates/, vars/, defaults/, meta/} # Role dependencies are managed in the meta/main.yml 
Ansible facts = variables(nodes info) gathered by "setup" module ## ex: os-type,ipaddr used to make decisions for custom playbooks
Ansible handlers = Only triggered when a change is made, like restarting a service after a configuration file has been updated. defined w/ "notify" keyword.
-==========================================================

/etc/ansible/ansible.cfg - tool configs # Ex: log-path = /var/log/ansible.cfg, inventory=<custom-path>

/etc/ansible/hosts - inventory of hosts groups. ## inventory/{prod,stage,dev} ## using custom-inv => ansible-playbook -i <inv-path> file.yaml
[localhost]
ansible_server ansible_connection = local
[dev]
ansi_amazon ansible_host = ip
[prod]
ansi_redhat ansible_host = ip
==========================

SSH connection on managed nodes:
On Ansible control node: 
        ssh-keygen -t rsa -b 4096 
        ssh-copy-id user@managed_node_ip ## Alt: cat .ssh/id_rsa.pub >> .ssh/authorized_keys (on node)
On nodes:
        /etc/ssh/sshd_config ## permitrootlogin yes ; password_auth yes ## then have root user in inventory for this host
         service sshd restart$ansible -m ping all
Define nodes in inventory(.ini): 
        [webservers]
        server1 ansible_host=192.168.1.10 ansible_user=admin
        server2 ansible_host=192.168.1.11 ansible_user=admin
To test connection: $ansible -m ping all # ansible all -m ping -i hosts --private-key=/path/to/private_key
==========================

cd playbooks ; cat file.yaml ; ansible-playbook file.yaml
- hosts: all
  tasks: 
    - name: create {file,directory}
      file: path=/tmp/test state={touch,directory}
      
Adhoc commands===
ansible all -m file -a state=directory path=/tmp/dir1 mode=600
ansible dev -m yum -a "pkg=httpd state=installed"
            -m service -a "name=httpd state=started"
            -m copy -a "src=/etc/hosts dest=/tmp/hosts"
      
Use when
- hosts: all
  user: amar
  tasks:
    - name: Shut down Debian flavored systems
      ansible.builtin.command: /sbin/shutdown -t now
      when: ansible_facts['os_family'] == "Debian"
==========================

Ansible-vault
ansible-vault create test.yaml ## test.yaml will be encrypted        ## {create|view|edit} w/o decrypt
ansible-vault encrypt/decrypt test1.yaml        ## to encrypt existing file ## {rekey} to change passwd
playbook => vars: db_passwd: !vault <encrypted-content>         ## !vault tag is used for encrypted variable
        ## ansible-vault encrypt_string 'my_secret_password' --name 'some_password' ## gives encrypted-content
Execute encrypted playbook: ansible-playbook <playbook.yml> --ask-vault-pass ## --vault-password-file <password_file>     
==========================

Ansible-roles
ansible-galaxy init web ## web/{meta, templates, files, tasks, vars, handlers}/main.yaml
web.yaml
---
 - hosts: dev
   roles: 
    - web
    
Ex: modules = copy, command, shell, file, apt/yum, service, 
* variables are similar to html, can be used as  - {{ variable }} that are created in vars. 

Handlers + loop-iterate actions
---
 - hosts: all|dev|prod|ip|fqdn
   vars: 
    http-port: 8080
    key: value
    
   tasks:
    - name: listen port {{ http-port }}
      lineinfile: dest=/etc/apache2/ports.conf regex="$Listen 80" line="Listen {{ http-port }}" state=present
      notify: 
        - restart apache2
        
    - name: Create multiple dirs
      command: mkdir {{ item }}
      with_items:
        dir1
        dir2
        dir3
        
   handlers:
    - name: restart apache2
      service: name: apache2 state: restarted
      
 
    


