$ vim /etc/yum.repos.d/example.repo
## set, (enabled=1) for <os-version>_appstream repo. 

$ yum search mysql ; yum install mysql-server

$ mysql -u root -p ## default no-passwd

Create User.... and resp queries....==============
CREATE USER 'amar'@'localhost' IDENTIFIED BY 'Welcome123!'; ## create/alter(passwd), localhost/fqdn/%(wildcard)=anyhost/
RENAME USER 'amar'@'localhost' TO 'amar'@'%';
GRANT ALL PRIVILEGES ON *.* TO 'amar'@'%' WITH GRANT OPTION; ## localhost/fqdn
FLUSH PRIVILEGES; ## reload grant tables...
========================================================

$ mysql> show databases ;
$ mysql> use abcd ; ## abcd database schema
$ mysql> show tables ;
$ mysql> select * from table1 ; 
$ mysql> desc table1 ; # shows the table structure
$ mysql> show create table table1 ## prints sql query that used to create the table table1
$ mysql> source example.sql ; # run sql queries script

create-table.sql==================================
create table example_metrics (
example_id int AUTO_INCREMENT,
col1 varchar (100),
col2 varchar (100),
col3 int (10),
col4 decimal (5, 2),
example_recent tinyint default (1),
example_updated timestamp default now(),
primary key (example_id)     );
========================================================

update table1 set example_recent = 0 where example_id > 0; ## set recent=0 for all existing data
insert into table1 (col1, col2, col3, col4) values ('string1','string2',100,10.0); 
delete from table1 where example_recent > 0; ## clears data of recent update

========================================================
example queries with join statement....

SELECT a.stock_code FROM price_today a
INNER JOIN price_tomorrow b ON a.stock_code = b.stock_code
WHERE b.price > a.price ORDER BY stock_code asc;

SELECT ei.employee_ID, ei.name FROM employee_information ei
JOIN last_quarter_bonus b ON b.employee_ID = ei.employee_ID
WHERE ei.division LIKE 'HR' AND b.bonus >= 5000;

select cs.customer_name, cast(iv.total_price as decimal(12,6)) from customer cs
join invoice iv on iv.customer_id = cs.id
where iv.total_price < 588.375 order by iv.total_price desc;

## multiple join...
select ct.city_name, pd.product_name, round(iv.total_price,2) from city ct
join customer cs on cs.city_id = ct.id
join invoice iv on cs.id = iv.customer_id
join invoice_item ivt on iv.id = ivt.invoice_id
join product pd on ivt.product_id = pd.id
order by iv.total_price desc, ct.city_name asc, pd.product_name asc;

============= Group By and Order By example =============
select count(*), to_char(created,'MONYYYY') from ExampleTable 
group by to_char(created,'MONYYYY')
order by to_date(to_char(created,'MONYYYY'),'MMYYYY')

TO_DATE:
    select * from ExampleTable where created >= to_date('3/1/2024','mm/dd/yyyy') ## created can be timezone(6)
    Note: to_char(created, 'mm/dd/yyyy') <= <some_date> ## Must convert the "created" field for less than a date. 

============== Get Unique records of a specific column ============
select distinct <col1> from ExampleTable ## Ex: col1=city_name

============= To filter recs with null values ================
select nvl(col1,0) as field from ExampleTable where field=nvl(:var1,0) ## var1 can be a variable in apex for example.

============== case-when examples ============
select count(case when field='True' then 1 else null end) from ExampleTable ##Get a count with condition
select col1,col2, case when col1='val1' then 'red' else 'green' end as colors from ExampleTable # create new column=colors
    select type, status,
    case when status = 'SUCCESS' then (count - (select count from HLG where type=t.type and status='HEALED')) else count end as count,
    from hlg t order by type,status desc

select id, type, case when regexp_like(status, 'FAILED|IN_PROGRESS|TIMEOUT') then 'FAILED' else status from ExampleTable

===============Regex usage for where/case-when condition===============
simple pattern matching::
    select * from ExampleTable where type LIKE '%_morning%'
regex pattern matching::
    select * from ExampleTable where REGEXP_LIKE(type,'good_(morning|night)') ## regex pattern in type column
    select * from ExampleTable where regexp_like('good_morning,good_night',type) ## to search multiple values
## Can be used >> case when regexp_like(...) then '...' end as col<3>

===============imaginary table use in a query============
Ex1: with tb as ( select * from XX; union all ; select * from YY) ## further used as <select * from tb>
Ex2: with tb1 as (select * from XX), tb2 as (select * from YY) ## further used as two separate tables: tb1, tb2

===============Fill the gaps with zeros(Cross-Join + COALESCE)============  ## use above imaginary table 
## coalesce(multi-args) ~ nvl(only 2args), gives first non-null value

select Types.type, Statuses.status, coalesce(your_table.count,0) 
from (select distinct type from your_table) Types
cross join (select distinct status from your_table) Statuses
left join your_table on Types.type=your_table.type and Statuses.status=your_table.status
### ex: type: prov|upg|patch, status: success|failed|healed

ListAggregation:
select name, sum(marks), listagg(subject || '-' || marks, '/') within group(order by subject) from tb1 
Result: Amar 100 maths-50/science-50 ## input: 1)Amar maths 50, 2)Amar science 50

=============== Replace method usage ===============
select replace(type,'good_','bad_') from ExampleTable ## syntax: replace(column, string, to_replace_with)

=====================Alter Table================================
alter table ExampleTable ADD column_name <data_type>; ## data_type.Ex: varcar2(50) 
alter table ExampleTable ADD primary key (col_name); 
alter table <schema>.<tb1> add constraint <name> primary key ("col1");
alter table <schema>.<tb1> add constraint <name> foreign key ("col1") references <tb2> ("col2");
alter table SCH1.tb1 add col1 varchar2(4000) check (col1 is null or col1 is JSON) ## <add|modify> ## json constraint

=======If a filter value is null choose all records ===========
Ex: Null display value = ALL, Null return value = %
==> field LIKE :var || %
