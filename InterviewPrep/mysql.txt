$ vim /etc/yum.repos.d/example.repo
## set, (enabled=1) for <os-version>_appstream repo. 

$ yum search mysql ; yum install mysql-server

$ mysql -u root -p ## default no-passwd

Create User.... and resp queries....==============
CREATE USER 'amar'@'localhost' IDENTIFIED BY 'Welcome123!'; ## create/alter(passwd), localhost/fqdn/%(wildcard)=anyhost/
RENAME USER 'amar'@'localhost' TO 'amar'@'%';
GRANT ALL PRIVILEGES ON *.* TO 'amar'@'%' WITH GRANT OPTION; ## localhost/fqdn
FLUSH PRIVILEGES; ## reload grant tables...
========================================================

$ mysql> show databases ;
$ mysql> use abcd ; ## abcd database schema
$ mysql> show tables ;
$ mysql> select * from table1 ; 
$ mysql> desc table1 ; # shows the table structure
$ mysql> show create table table1 ## prints sql query that used to create the table table1
$ mysql> source example.sql ; # run sql queries script

create-table.sql==================================
create table example_metrics (
example_id int AUTO_INCREMENT,
col1 varchar (100),
col2 varchar (100),
col3 int (10),
col4 decimal (5, 2),
example_recent tinyint default (1),
example_updated timestamp default now(),
primary key (example_id)     );
========================================================

update table1 set example_recent = 0 where example_id > 0; ## set recent=0 for all existing data
insert into table1 (col1, col2, col3, col4) values ('string1','string2',100,10.0); 
delete from table1 where example_recent > 0; ## clears data of recent update

========================================================
example queries with join statement....

SELECT a.stock_code FROM price_today a
INNER JOIN price_tomorrow b ON a.stock_code = b.stock_code
WHERE b.price > a.price ORDER BY stock_code asc;

SELECT ei.employee_ID, ei.name FROM employee_information ei
JOIN last_quarter_bonus b ON b.employee_ID = ei.employee_ID
WHERE ei.division LIKE 'HR' AND b.bonus >= 5000;

select cs.customer_name, cast(iv.total_price as decimal(12,6)) from customer cs
join invoice iv on iv.customer_id = cs.id
where iv.total_price < 588.375 order by iv.total_price desc;

## multiple join...
select ct.city_name, pd.product_name, round(iv.total_price,2) from city ct
join customer cs on cs.city_id = ct.id
join invoice iv on cs.id = iv.customer_id
join invoice_item ivt on iv.id = ivt.invoice_id
join product pd on ivt.product_id = pd.id
order by iv.total_price desc, ct.city_name asc, pd.product_name asc;

========================================================



