AWS VPC

1. subnet & subnet mask
2. VPC & benefits
3. components, 
4. direct connect

$$$$$$$$$$$$$$$$&&&&&&&&&&&&

subnet --> all devices whose IP addresses have the same prefix
[a portion of n/w, that shares a common address component]

subnet mask--> used to determine what subnet an ip belongs to .
N=all 1's, H=all 0's
IP format, class, n/w name[subnet], default subnet, 
N[8].H[8].H[8].H[8] -- class A[0-126] -- /8bits -- 255.0.0.0,
N[8].N[8].H[8].H[8] -- class B[128-191] -- /16bits -- 255.255.0.0
N[8].N[8].N[8].H[8] -- class C[192.223] -- /32bits -- 255.255.255.0

no.of n/w, no.of hosts, network type
 8exp(2), 24exp(2)-2, Large --- class A// classB- medium, classC - small

subnet mask && IP = network
ex: 255.255.0.0 && 192.168.9.12 = 192.168.0.0/16  - class B , //255.255.128.0 --- 192.168.0.0/17

$$$$$$$$$$$$$$$$&&&&&&&&&&&&
virtual private cloud

vpc--internet gateway -- [[public network]] ---> customer gateway--customer
launch instances into a subnet
define custom IP range inside each subnet

configure route tables b/w subnets
configure internet gateways & attach to subnets
Layered security --- > security groups - instances
						access control list - subnet
default vpc is there in every aws account, 
non default vpc -- u need attach  internet gateway to access internet

#############
security group acts as a virtual firewall for instance to control inbound/outbound traffic
***security groups for instance level , not for the subnet level
can create up to 500 security groups
[can set allow rules only, not deny rules]



$$$$$$$$$$$$$$$$&&&&&&&&&&&&
vpc compnents
{
VPC 
[IP address]--[public, private subnets]
[Route Table]--[NACL(access control lists)]
[NAT instance&Gateway]&[VPC Peering]&[Internet&Virtual Gateway]
}

private subnet, can't access internet, but download packages using NAT

Route table -- contains set of rules(routes)//to determine where network traffic is redirected
each subnet in vpc must be associated wit a route table

ACL -- optional layer of security for VPC, acts as firewall(for controlling traffic in&out)
n/w ACL has in/out bound rules (allow/deny traffic)

NAT [n/w address translate] - talks public to private
NAT Instance - need to pay for instance, NAT Gateway - need to pay for gateway
VPC peering, to connect one VPC to another 	
Internet Gateway - to perform NAT[public to private], 
					to provide a target internet-routable traffic
we can create instance without allowing (auto assigning public ip ), when we are adding VPC, [we can use Elastic ip to connect]

types[scenarios ] of vps -- 4
1.public subnet
2.public+private subnet
3.public+private subnet + VPN
4.private subnet + VPN

$$$$$$$$$$$$$$$$&&&&&&&&&&&&

AWS direct connect <*$*>
is a n/w service -- provides alternative to internet to utilize AWS cloud services
links internal n/w to <*$*> location over standard ethernet cable[your router----AWS direct connect router]

security, reduces costs, 
compatible with all AWS services
private connectivity to Amazon VPC
elasticity = 1GB to 10GB connections, 
connections & virtual interfaces are managed easily via console

$$$$$$$$$$$$$$$$&&&&&&&&&&&&

security group --- instance level, [allow rules only], statefull(all outbound)
NACL[access control list] -- subnet level [allow/deny], stateless (return traffic must be allowed by rules)
-aplies to all instances inside that subnet

$$$$$$$$$$$$$$$$&&&&&&&&&&&&


VPC CONNECTION
1. subnets
2. route tables for private & public [seperate for both]
3. gateways [igw/nat] // NAT gateway -- [Elastic IP + Public subnet]
4.route +subnet & +gateway


VPC PEERING 

1. 
10.0.0.0/16
make a vpc having 2pub[route table PUB] & 2private[route table PRV] subnets
11.0.0.0/16
make another vpc having a single subnet[i.e, private]

2.
make vpc peering -- Accept Request.

3.
Route tables
You can specify the entire IPv4 CIDR block of the peer VPC
PUB 11.0.0.0/16 pcx-c37b9faa // cidr of ther vpc
PRV 11.0.0.0/16 pcx-c37b9faa // cidr of ther vpc
route table of 2nd vpc // need to do same


































