Terraform Concepts:
	tf-Commands:	init,plan,apply,destroy
	Provider:	plugins, bridge b/w terrform and target platform   ## blocks{provider identifier[oci/<version>], provider configuration[tenancy,comp,user,auth]}
	Resources:	cloud resources like compute,DB ## blocks....
	Variables:	parameters ## file: terraform.tfvars [key = value] or ## blocks{details}
	Outputs:	to share data b/w diff parts of infra ## blocks{prints output from resources execution}
	Modules:	grouping of related resources together into reusable packages ## blocks{use source attribute to import a module}
	State:		current state of infrastructure ## file: terraform.tfstate, locking mechanism to prevent conflicts of concurrent updates.

Terraform Commands:
	version		- Show the current Terraform version
	init		-  Prepare your working directory for other commands
	apply		- Create or update infrastructure
	destroy		- Destroy previously created infrastructure
	validate	- Check whether the configuration is valid
	plan		- Show changes required by the current configuration
	output		- Show output values from your root module
	fmt		- Reformat your configuration in the standard style

Parameter evaluation order: Terraform-config(eX:main.tf/provider-block) -> Linux environment.vars -> OCI config(non-default profile -> default profile)

-------- directory structure w/ a module
./main.tf
./terraform.tfvars
./variables.tf
./vcn_module/{main.tf, variables.tf, output.tf}

-------- file contents....
## ./main.tf 
	module "vcn01" {
		source = "./vcn module"
		vcn_name = "vcn01"
		vcn_cidr_block = "172.0.0.0/16"
		compartment_id = var.compartment_ocid
	}


## ./provider.tf (provider-identifier + configuration)
	terraform { 
		required_providers { oci = { source = "oracle/oci" } ｝
	}
	provider "oci" {
		# tenancy_ocid = "<tenancy OCID»"
		# user_ocid = " ocidi.compartment.ocl..aaaa"
		# private_key_path = "~/keys/priv-pem"
		# fingerprint = "AA: 11: BB: 22"
		region = var.region
	}

## ./terraform.tfvars
	region = "us-ashburn-1"
	compartment_ocid = "ocid1.compartment.oc1..aaa"
	vcn01_cidr_block = "10.0.0.0/16"
	vcn0l_ display_ name = "vcn01"
--------
## ./vcn_module/main.tf 
	resource "oci_core_virtual_network" "vcn01" {
	compartment_id = var.compartment_ocid
	cidr_block = var.vcn01_cidr_block
	dns_label = var.vcn01_display_name
	display_name = var.vcn01_display_name
	}

## ./vcn_module/variables.tf
	variable "region" ()
	variable "compartment_ocid" {}
	variable "vcn01_cidr_block" {}
	variable "vcn01_display_name" {}

## ./vcn_module/outputs.tf
	output "vcn_id" { value = oci_core_virtual_network.vcn.id }
	output "vcn_cidr_block" { value = oci_core_virtual_network.vcn.cidr_block }
	output "vcn_dns_label" { value = oci_core_virtual_network.vcn.dns_label }
--------
$ terraform init 		## initializes directory structure and allows running other commands. 
$ terraform validate		## syntax validation
$ terraform plan		## Terraform-Engine creates a DIFF of Code and State, so can it can be reviewed before apply. 
$ terraform apply		## It runs plan by default and asks for a prompt to apply
$ terraform destroy		## Terraform-Engine reads State file and destroys infra.
$ terraform refresh		##  Infra --discover--> Terraform-Engine --update--> State ## to update state file if there any manual change in infrastructure. 

Note: apply => Terraform Code|Config --read--> Terraform-Engine { --create--> Infrastructure, --write--> State (view of infra) }
----- Apply -> Plan -> Refresh -> State -> Plan -> Diff -> Apply -> Infra

--------------------------------
--------------------------------
Resource Manager Concepts: { configuration -> stack -> plan -> apply -> provision-resources }
	Configuration Source Provider	- GitHub/GitLab/Bitbucket
	Configuration			- terraform code
	Stacks				- collection of terraform configurations
	Templates			- standardized configurations for automated deployment and management
	Actions				- plan/apply/destroy, Edit(code), DriftDetection(diff b/w configuration & infrastructure), ImportState(to-reflect-existing-infra)
	Jobs				- Operations performed on stacks(create/update/delete...resources)
		---- job-Lifecycles: Accepted -> In progress -> { Succeeded, Failed, (Cancelling -> Canceled) }

1. Stack can be created from below options
	- My configurationzip(zip,folder upload)
	- configuration-source-provider(GitHub) which integrated priorly using personal-access-token from GitHub. Give the values to the Variables that are the configuration.
	- Existing compartment (can select all resoucers or selected(ex:core) resources)
	- Template
2. when plan/apply action triggered, it create a corresponding job. Logs of that action can be viewed inside the job details. 


Major components of Terraform: Configuration/code, State, Diff, Terraform-Engine, Infrastructure. 
State: state of infrastructure, Diff: b/w code and state
Terraform-Engine: Core + Provider plugins(ex: oci) ; Terraform(Diff|Refresh|Apply) ---> TargetPlatform(Create|Read|Update|Delete)
main.tf, variables.tf(ex: compartmentid, region); modules are re-usable codes(ex: vcn)

Day1) Terraform-code(/plan) --Read--> Terraform-Engine --Provision--> { IaaS, PaaS, On-premises } ## IaC = Infra as code
Day2) { Existing Infra, code } --Analyze|Read-->> engine --Modify-->> new-infra
DayN) Existing Infra --Analyze--> engine --Destroy--> No-infra 


State & Diff files will be centralized(version-control) using Cloud-based Terraform, i.e., Resource Manager

Resource Manager/Stack -> create stack w/ code location selection; Use Plan/Apply to get infra ready ; It can create terraform config from an existing infra as well. 
	- Drift detection: Run it to find Any changes from actual Infra, we can view the report. Note: Only reports on resources that Terraform knew about already
	To avoid missing any resources, create a new stack out of existing compartment, and download Terraform configuration. 
	- Templates: Terraform configuration, Schema document(Variables|Contraints on vars)=yaml

=================================================================================
