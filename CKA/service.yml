ServiceTypes: | 
    ClusterIP ->  default service type. app can be accessible with cluster IP(svcIP) and service port(svcPort). 
              needed where multiple clusters used (limit:5000nodes/cluster) -Ex: flipkart,amazon - can't use in our usual environments.

    NodePort --> nodeIP{1,2,3}: nodeport

    LoadBalancer --> IP from nginx-controller: service-port ## get ip <== k get svc -owide(named as CLUSTER IP)
                  This can provision a on-demand loadbalancer on cloud provider, and maps to ExternalIP. 
                  
    ExternalName -> maps service to a dns. You can bring your own domain or service can be mapped to a LB IP. 

CommandWay: |
      k run my-pod --image= && k get pods
      k expose --help # Jump to examples. 
      k expose pod my-pod --port=80 --name=my-service --type=NodePort $drs

Troubleshooting: |
  k get svc,ep ## ep = podIP:podPort; podPort exposed in pod container spec.containers[].ports.containerPort
  k describe ep svc-name ; k describe svc svc-name
  k run bb --image=busybox --command sleep 4800
  k exec bb -- nslookup <svc-IP> ## curl podIP:podPort ; curl svcIP:svcPort ; curl nodeIP:nodePort

  ps aux | egrep "kubelet|kube-proxy" ; find logs in /var/log/{kubelet,kube-proxy}.log ## systemctl/service restart kubelet
  ==== More steps in Training-n-Docs.yml
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
  labels:
    app: tomcat-app
spec:
  selector: 
    app: tomcat-app
  type: NodePort ## same exact manifest for LoadBalancer
  ports:
    - nodePort: 31000
      port: 80
      targetPort: 8080

