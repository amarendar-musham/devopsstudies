add can download from url and copy to dest folder, 
if it is in local folder it will decompress and adds it to the image as layer

ADD 1.3.1.tar.gz /app/
Automatic TAR extraction.//identity, gzip, bzip2 or xz
ADD http://www.example.com/script.sh /tmp
Fetch files from remote URLs.

**but with COPY instruction, it will only add this archive file to the image
ADD can decompress not all kind of archives.


Docker is a containerization platform which packages your application and all its dependencies together

Unlike Virtual Machines which has its own OS, Docker containers uses the host OS  

Docker image is the source of Docker container. In other words, Docker images are used to create containers. Images are created with the build command

Docker containers include the application and all of its dependencies, but share the kernel with other containers, running as isolated processes in user space on the host operating system

Docker hub is a cloud-based registry service which allows you to link to code repositories, build your images and test them, stores manually pushed images,


it makes it easy for developers to quickly create, ready-to-run containerized applications and it makes managing and deploying applications much easier. You can even share containers with your applications.

any tool that already communicates with a Docker daemon can use Swarm to transparently scale to multiple hosts.

Docker can build images automatically by reading the instructions from a Dockerfile.

A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.
docker-compose -f docker-compose.json up
//to use json for compose file

docker run -t -i
docker ps -a
docker stop container ID
docker restart container ID



RUN is an image build step, the state of the container after a RUN command will be committed to the docker image. A Dockerfile can have many RUN steps that layer on top of one another to build the image.

CMD is the command the container executes by default when you launch the built image. A Dockerfile can only have one CMD. The CMD can be overridden when starting a container with docker run $image $other_command.

ENTRYPOINT is also closely related to CMD and can modify the way a container starts the image.

<instruction> ["executable", "param1", "param2", ...]

CMD ["/bin/echo", "Hello world"]  
ENTRYPOINT ["/bin/echo", "Hello world"] 

ENV name John Dow  
ENTRYPOINT ["/bin/bash", "-c", "echo Hello, $name"] 
o/p: Hello, John Dow  
%%%%%%%%%%%%%%%%%%%%%
ENTRYPOINT ["/bin/echo", "Hello"]  
CMD ["world"] 

1.docker run -it <image>
		Hello world  
2.docker run -it <image> John
		Hello John 
%%%%%%%%%%%%%%%%%%%%%%



docker login // login to the docker public registry on your local machine
docker tag image username/repository:tag
ex: docker tag friendlyhello john/get-started:part1
docker images
docker push username/repository:tag // upload

docker run -p 4000:80 username/repository:tag

************

FROM ubuntu:latest
MAINTAINER <name>

RUN apt-get update
CMD ["python", "app.py"] // "echo" "hello world"

ADD . /app			// http://........tar.gz /usr/src # downloads and copy || extracts and copy 
COPY preconditions.txt /usr/tmp

ENTRYPOINT service apache2 start && bash
EXPOSE 80
ENV var_home="/var/etc" // NAME amar

USER daemon // used to set the UID|username when running img
VOLUME /data // location on host system
WORKDIR /app
RUN pwd


ONBUILD RUN rm -rf /usr/tmp

**************************************
EXPOSE 27017
CMD ["--port 27017"] // default port to execute the entry point [mangodb]
ENTRYPOINT usr/bin/mangodb
RUN apt-get update \
		&& apt-get install unzip \
		&& \
		for server in \
					hi.com \
					bye.com \
					good.com \
		; do \
				echo $server \
		done ; \
		
**********************************************

docker cp $PWD/test.txt a09323a4:/tmp
docker exec a09323a4 ls /tmp
docker top a09323a4
docker start a09323a4 // attach, stop, kill
