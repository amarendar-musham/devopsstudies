Pod-spec.volume ->\
                 -> PVC -> PV(NFS/Cloud storage)
                 -> configmap (files/dir/variables)
                 -> Secret (base64 encoding)
kind: Pod
spec.Containers.volumeMounts: (name:test, mountPath: /centos1)
spec.volumes: (name: test, emptyDir: {})


kubectl create -f pv.yaml ## creates "pv-volume" PV.
kubectl get pv pv-volume 

kubectl explain pv.spec.storageClassName

kubectl create -f pv-nfs.yaml ## creates nfs(pv-nfs) volume

kubectl create -f pvc.yaml ; kubectl get pvc;
kubectl create -f nfs-pvc.yaml ; kubectl get pvc

kubectl create -f pv-pod.yaml# kubectl describe pv-pod

kubectl create -f nfs-pv-pod.yaml ; ## describe

---
Pod{spec.containers.volumeMounts.name} --> \
Pod{spec.volumes.pVC.claimName} --> \
PVC{spec.accessModes.RWO/RWM} --> \
PV{spec.accessModes.RWO/RWM} --> \
PV{spec.nfs.server/path}
---

==================configMaps(cm)=============================
-------files
kubectl create cm nginx-cm --from-file nginx-custom-config.conf
kubectl get cm nginx-cm -o yaml ## data section contains of the above config file. 
## Pod{spec.volumes.configMap.name} = nginx-cm
## Pod{spec.volumes.configMap.items.key} = nginx-custom-config.conf // reads from configMap{data}

kubectl create -f nginx-cm.yml ## connect nginx-cm pod, and check this file for content - /etc/nginx/conf.d/default.conf

--------variables
configMap(name=myconfig,color=red)
Pod{spec.containers.env}(name:color, valueFrom.configMapKeyRef.{name:myconfig,key:color})

kubectl create cm myconfig --from-literal=color=red
kubect get cm myconfig -o yaml ## data.color=red

kubectl create -f cm-pod.yml ## describe
## exec, echo $COLOR

==================secrets=============================
types of secrets(encoded, not encrypted):
1. docker-registry
2. TLS
3. generic

secrets are used in the way that configMaps used. 
mounted as volumes
imported as variables

kubectl create secret generic secretstuff --from-literal=pass=pass --from-literal=user=linda
kubectl get secrets secretstuff -o yaml

Pod{spec.containers.volumeMounts.name} = secret -> \
Pod{spec.volumes.name} = secret -> \
Pod{spec.volumes.secret.secretName} = secretstuff. 

kubectl create -f pod-secret.yml ## describe, check mounts
exec, cat /secretstuff/{pass,user}

-------
kubectl create secret generix mysql --from-literal=password=root
kubectl get secrets mysql -o yaml ## data.password. 

kubectl create -f pod-secret-as-var.yaml ##exec, env

----lab
kubectl create -f pv.yaml && pvc.yaml && pv-pod.yaml

## describe pod, check mount - pv, 


