Kubernetes - Container orcastrator. Orchestration.

Master node is responsible for overall management of cluster. - communication, scheduler, controller. 
kube-api - The API server. 
Scheduler - controls pods to run on which node. 

Roles of controller:
node controller -worker states
replication controller - mainatain #of pdds.
endpoint controller - joins services & pods
service & token controllers. 

etcd - distribute key-value store. 
kubectl have kubeconfig, which contains server information and authentication info which used to connect the cluster. 


Worker Nodes

services need to run on nodes - kubelet, Docker, kube-proxy


Node requirements...
 - A kubelet running
 - containtainer tooling like docker 
 - A kube-proxy process running
 - Supervisord - restart components. 

Minikube
Lightweight K8s implementation that creates a VM on your local machine and deploys a simple cluster containing only one node. 

Pod contains...
 - Docker container
 - Storage resources
 - Unique network IP
 - Options that govern how the containers should run
Pod represents one single unit deployment even though you have multiple containers in it. 

Benefits of controllers 
 - Application reliability
 - Scaling
 - Load balancing. 
 
Kinds of controllers
 - ReplicaSets - Ensures that a specified number of replicas for a pod are running all the time. 
 - Deployments - provides declarative updates for pods & ReplicaSets. 
 - DaemonSets - Ensure that all nodes run a copy of a specific pod. A daemonset will add/remove the required pods.
 - Jobs - Supervisor process for pods carrying out batch jobs. 
 - Services - Allow the communication b/w one set of deployments with another.
 
 
 
--------------------------------------------------------------------
 
 
Name space - virtual cluster in a physical cluster.
 
Kubelet = Kubernetes node agent
 - Communicates with API server to see if pods have been assigned to nodes. 
 - health check - pod/node status
 - mount/run pod volume/secrets
 - executes pod container via container engine 

Podspec = yaml file - describes a pod.

>> kube-apiserver ==={podspecs(1,2,3)}===>> kubelet(ensures container health as described in podspec)

Kube-proxy modes:::
 - User space modes
 - Iptables mode
 - Ipvs mode (alpha feature)

Services defined against the API server: kube-proxy watches API server for add/remove of services. 
 - For each service, kub-proxy opens a random port on local node. 
 - traffic to that port are proxied to one of the corresponding back-end pods.
 
 
https://kubernetes.io/docs/tasks/tools/install-kubectl/
 

In windows we need to enable hypervisor v. And Open hyderviser-v. create new VM with name minikube. 
minikube start --vm-driver="hyperv" hyperv-virtual-switch="minikube"

-----------------------------
-----------------------------
Ways to Run K8s
 - minikube
 - docker desktop
 - kubernetes in docker(kind)
 - managed k8s service in a cloud - Ex: Amazon Elastic k8s service - EKS
 
kubectl create -f helloworld.yaml // deployment can be done with yaml inputs..
kubectl get all
kubectl expose deployment helloworld --type=NodePort
kubectl get all
minikube service helloworld ## will show you the endpoint details.
kubectl get deployment/helloworld -o yaml ## helloworld-deployment.yml
kubectl get service/helloworld -o yaml   ## helloworld-service.yml
kubectl create -f helloworld-deployment.yml
kubectl create -f helloworld-service.yml

kubectl get pods --show-labels
kubectl pod/helloworld app=helloworldapp --overwrite
kubectl pod/helloworld app-
kubectl get pods --show-lables
kubectl get pods --selector env=prod --show-labels (Or you can use -l flag)
kubectl get pods -l dev-lead=ama,env=staging
kubectl get pods -l dev-lead!=ama,env=staging
kubectl get pods -l 'release-version in (1.0,2.0)'  ## in/notin
kubectl delete pods -l dev-lead=ama

kubectl create -f=helloworld.yaml -record
kubectl set image deployment/<dep-name> helloworld=<image-name>
kubectl get deployments
kubectl get rs
kubectl get pods
kubectl rollout history deployment/<dep-name>
kubectl rollout undo deployment/<dep-name>

kubectl describe deployment <dep-name>

kubectl create -f cronjoy.yaml
kubectl get cronjob
kubectl get jobs
kubectl edit cronjobs/hellocron
kubectl get cronjobs


--------------------------------------------------------------------
 
Kubeadm can install k8s on cloud/onprem environment. 

1. Intially provision the master host with docker & k8s distribution
2. Run kubeadm init, which starts kubeadm, provisions the k8s control plane, and provides join token.
3. Run kubeadm join with join token on each worker node. The workers will join the cluster.


AWS - kops tool. 

kops Automates the k8s cluster provioning in AWS, and deploys high-availability[HA] masters. Permist upgrading with kub-up. Uses a state-sync model for dry-runs and automatic idempotency.

Generates config files for AWS CloudFormation & Terraform.
Supports custom k8s add-ons. 
Uses manifest based API configuration. 

kops(AWS) -~ kubectl 


Kubernetes supports multiple virtual clusters(namespaces)
 - Enterprise Roles and responsibilities. - differentiate services/deployments of different teams.
 - dev/test/prod  - partition development landscapes
 - non-multi-tenant Customer Partitioning 

kubectl get namespaces
kubectl create namespace <>
kubectl delete namespace <>
deployment to a specific namespace [-n <namespace>]


Monitoring....
 - stdout
 - kubectl logs
 
cAdvisor - open-source resource usage collector that was build for containers
  - collects CPU, memory, filesystem & network statistics
  - provides overall machine usage by analyzing root container on the machine. 

Prometheus 
   - collect application metrics & monitor k8s via projects like kube-prometheus

cAdvisor + Prometheus --> Grafana(Data visualization Platform)


Service accounts = Accounts managed by K8s API.

Popular authentication modules------
 - client certs ## --client-ca-file=<filename> to API server
 - Static token files(static password file) ## --token-auth-file=<filename> ## file=csvfile[token, username, UID, "GROUPs"]
 - OpenID Connect
 - Webhook mode

Popular authorization modules for enterprises---
 - ABAC - Attribute-based access control
 - RBAC - Role-based access control
 - Webhook 
 
https://github.com/kelseyhightower/kubernetes-the-hard-way  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  





































 
 